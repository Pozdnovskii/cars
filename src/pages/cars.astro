---
import { supabase } from "@lib/supabase";
import Layout from "@layouts/Layout.astro";

import CarCard from "src/componenets/CarCard.astro";

const { data: vehicles, count } = await supabase
  .from("vehicles")
  .select("id, brand, model, body, engine, slug, image_src", { count: "exact" })
  .not("image_src", "is", null)
  .range(0, 10);

const { data: brands } = await supabase
  .from("brands")
  .select("name")
  .order("name", { ascending: true });

const { data: bodies } = await supabase
  .from("bodies")
  .select("name")
  .order("name", { ascending: true });

const { data: engines } = await supabase
  .from("engines")
  .select("name")
  .order("name", { ascending: true });
---

<Layout>
  <main class="wrapper px-7 py-20">
    <h1 class="text-3xl mb-[1em]">All cars</h1>

    <section>
      <form id="filter-form" class="mb-6">
        <select name="brand">
          <option value="">All brands</option>
          {
            brands?.map((brand) => (
              <option value={brand.name}>{brand.name}</option>
            ))
          }
        </select>

        <select name="body">
          <option value="">All body types</option>
          {bodies?.map(({ name }) => <option value={name}>{name}</option>)}
        </select>

        <select name="engine">
          <option value="">All engines</option>
          {engines?.map(({ name }) => <option value={name}>{name}</option>)}
        </select>

        <button type="submit">Filter</button>
      </form>

      <ul class="grid" id="car-list">
        {vehicles?.map((car) => <CarCard car={car} />)}
      </ul>

      <div class="flex flex-col items-center text-center mt-8">
        <button
          id="load-more"
          class="px-6 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          style={vehicles && vehicles.length >= 11 ? "" : "display: none;"}
        >
          Show more
        </button>
        <p id="total-info" class="text-gray-600 mt-2">
          Shown {vehicles?.length || 0} out of {count || 0} cars
        </p>
      </div>
    </section>
  </main>

  <script>
    import { actions } from "astro:actions";

    let currentOffset = 0;
    let currentFilters = { brand: "", engine: "", body: "" };
    let isLoading = false;

    document
      .getElementById("filter-form")
      ?.addEventListener("submit", async (e) => {
        e.preventDefault();
        if (isLoading) return;

        const formData = new FormData(e.target as HTMLFormElement);
        currentFilters = {
          brand: (formData.get("brand") as string) || "",
          engine: (formData.get("engine") as string) || "",
          body: (formData.get("body") as string) || "",
        };

        currentOffset = 0;
        await loadCars(true);
      });

    document
      .getElementById("load-more")
      ?.addEventListener("click", async () => {
        if (isLoading) return;
        currentOffset += 11;
        await loadCars(false);
      });

    async function loadCars(replace = false) {
      isLoading = true;
      const loadMoreButton = document.getElementById(
        "load-more"
      ) as HTMLButtonElement;
      if (loadMoreButton) loadMoreButton.textContent = "Loading...";

      try {
        const { data } = await actions.filterCars({
          ...currentFilters,
          offset: currentOffset,
          limit: 11,
        });

        const carList = document.getElementById("car-list");
        const totalInfo = document.getElementById("total-info");

        if (carList && data) {
          console.log(data);
          const newCarsHTML = data.cars
            .map(
              (car) => `
                <li class="car-card">
                  <h2 data-transition-name="title_${car.model}">
                    ${car.brand} ${car.model}
                  </h2>
                  <p>${car.body} â€” ${car.engine}</p>
                  <a href="/cars/${car.slug}">More</a>
                  <img src="${car.image_src || "/images/car-placeholder.png"}" data-transition-name="img_${car.model}" />
                </li>
              `
            )
            .join("");

          if (replace) {
            carList.innerHTML = newCarsHTML;
          } else {
            carList.innerHTML += newCarsHTML;
          }

          const totalShown = replace
            ? data.cars.length
            : carList.children.length;
          if (totalInfo) {
            totalInfo.textContent = `Shown ${totalShown} out of ${data.total} cars`;
          }

          if (loadMoreButton) {
            loadMoreButton.style.display = data.hasMore ? "block" : "none";
            loadMoreButton.textContent = "Show more";
          }
        }
      } catch (error) {
        console.error("Error:", error);
      } finally {
        isLoading = false;
      }
    }
  </script>
</Layout>
