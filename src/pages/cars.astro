---
import { supabase } from "@lib/supabase";
import Layout from "@layouts/Layout.astro";

const { data: vehicles } = await supabase
  .from("vehicles")
  .select("id, brand, model, body, engine")
  .limit(20);
---

<Layout>
  <h1>–ê–≤—Ç–æ–º–æ–±–∏–ª–∏</h1>

  <!-- üîç –§–æ—Ä–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ -->
  <form id="filter-form">
    <select name="brand">
      <option value="">–í—Å–µ –±—Ä–µ–Ω–¥—ã</option>
      <option value="Toyota">Toyota</option>
      <option value="BMW">BMW</option>
    </select>

    <select name="engine">
      <option value="">–í—Å–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏</option>
      <option value="gas">Gas</option>
      <option value="hybrid">Hybrid</option>
    </select>

    <button type="submit">–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å</button>
  </form>

  <!-- üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ -->
  <div id="car-list">
    {
      vehicles?.map((car) => (
        <div class="car-card">
          <h2>
            {car.brand} {car.model}
          </h2>
          <p>
            {car.body} ‚Äî {car.engine}
          </p>
        </div>
      ))
    }
  </div>

  <script>
    import { actions } from "astro:actions";

    document
      .getElementById("filter-form")
      ?.addEventListener("submit", async (e) => {
        e.preventDefault();

        const formData = new FormData(e.target as HTMLFormElement);
        const brand = (formData.get("brand") as string) || "";
        const engine = (formData.get("engine") as string) || "";

        try {
          const { data: cars } = await actions.filterCars({ brand, engine });

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
          const carList = document.getElementById("car-list");
          if (carList && cars) {
            carList.innerHTML = cars
              .map(
                (car) => `
            <div class="car-card">
              <h2>${car.brand} ${car.model}</h2>
              <p>${car.body} ‚Äî ${car.engine}</p>
            </div>
          `
              )
              .join("");
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞:", error);
        }
      });
  </script>
</Layout>

<!-- <Layout title="Cars" description="Browse our cars">
  <main>
    <h1>Cars</h1>

    <form id="filter-form">
      <label>
        Brand:
        <input type="text" name="brand" placeholder="e.g. Toyota" />
      </label>
      <label>
        Body:
        <input type="text" name="body" placeholder="e.g. SUV" />
      </label>
      <button type="submit">Filter</button>
    </form>

    <ul id="cars-list">
      {
        vehicles.map((car) => (
          <li>
            <strong>
              {car.brand} {car.model}
            </strong>{" "}
            ‚Äî {car.body}
          </li>
        ))
      }
    </ul>
  </main>

  <script type="module">
    import { createClient } from "@supabase/supabase-js";

    const supabase = createClient(
      import.meta.env.PUBLIC_SUPABASE_URL,
      import.meta.env.PUBLIC_SUPABASE_ANON_KEY
    );

    const form = document.getElementById("filter-form");
    const list = document.getElementById("cars-list");

    form?.addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      const brand = formData.get("brand")?.trim();
      const body = formData.get("body")?.trim();

      let query = supabase
        .from("vehicles")
        .select("id, brand, model, body")
        .limit(50);
      if (brand) query = query.ilike("brand", `%${brand}%`);
      if (body) query = query.ilike("body", `%${body}%`);

      const { data: filteredCars, error } = await query;

      if (error) {
        alert("Error loading cars: " + error.message);
        return;
      }

      list.innerHTML = filteredCars
        .map(
          (car) =>
            `<li><strong>${car.brand} ${car.model}</strong> ‚Äî ${car.body}</li>`
        )
        .join("");
    });
  </script>
</Layout> -->
